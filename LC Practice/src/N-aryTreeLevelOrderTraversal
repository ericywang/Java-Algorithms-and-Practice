/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        Queue<Node> queue = new LinkedList<>();
        ArrayList<List<Integer>> returnList = new ArrayList<>();
        
        
        if(root == null) return returnList;
        
        queue.add(root);
        List<Integer> tempList;
        while(!queue.isEmpty()){
            int queueSize = queue.size();
            tempList = new LinkedList<>();
            for(int x = 0; x < queueSize; x++){
                Node tempNode = queue.remove();
                
                tempList.add(tempNode.val);
                
                for(Node child: tempNode.children){
                    queue.add(child);
                }
            }
            
            returnList.add(tempList);
        }
        
        return returnList;
    }
}
