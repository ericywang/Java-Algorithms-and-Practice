/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> returnList = new ArrayList<>();
        List<Integer> tempList = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();
        boolean direction = false;
        
        if(root == null)
            return returnList;
        
        queue.add(root);
        
        while(!queue.isEmpty()){
            int queueSize = queue.size();
            for(int x = 0; x < queueSize; x++){
                TreeNode tempNode = queue.remove();
                if(direction == false){
                    tempList.add(tempNode.val);
                }
                else{
                    tempList.add(0,tempNode.val);
                }
                
              
                if(tempNode.left != null) queue.add(tempNode.left);
                if(tempNode.right != null) queue.add(tempNode.right);
            }
            
            if(!tempList.isEmpty()){
                
                returnList.add(new ArrayList<>(tempList));
                tempList.clear();
                direction = !direction;
            }
            
        }
        
        return returnList;
    }
}
