class Solution {
    public boolean exist(char[][] board, String word) {
        int[][] direction = {{0,1},{1,0},{0,-1},{-1,0}};
        char[] wordArray = word.toCharArray(); 
        
        for(int col= 0; col < board.length; col++){
            for(int row = 0; row < board[0].length; row++){
                if(board[col][row] == word.charAt(0)){
                    
                    //ArrayList<Character> tempString = new ArrayList<>();
                    char[] tempString = new char[word.length()];
                    if(helperFunction(board, wordArray, 0, col, row, direction, tempString, word)) return true;
                }
            }
        }
        return false;
        
    }
    
    private boolean helperFunction (char[][]board, char[] wordArray, int currentCharInd, int col, int row, int [][] direction, char[] tempString, String word){
        int[] myArray = {col,row};
        char oldChar = board[col][row];
        if(board[col][row] != ' ' && wordArray[currentCharInd] == board[col][row]){
            tempString[currentCharInd]=board[col][row];
            
            board[col][row] = ' ';
            for(int x = 0; x < 4; x++){
                int adjCol = col + direction[x][0];
                int adjRow = row + direction[x][1];

                if(adjCol >= 0 && adjCol < board.length && adjRow >=0 && adjRow < board[0].length){
                    if(currentCharInd+1 < wordArray.length)
                        if( helperFunction (board, wordArray, currentCharInd+1 ,adjCol, adjRow, direction, tempString, word)) return true;
                }
            }
        }
        
        board[col][row] = oldChar;
        return Arrays.equals(tempString, wordArray);
    }
}
