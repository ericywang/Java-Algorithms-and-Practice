class Solution {
    public int orangesRotting(int[][] grid) {
        LinkedList<int[]> queue = new LinkedList<>();
        int[][] direction = {{0,1}, {1,0}, {-1,0}, {0,-1}};
        int count = -1;
        int freshOranges = 0;
        
        for(int rows = 0; rows < grid.length; rows++){ 
            for(int col = 0; col < grid[0].length; col++){
                if(grid[rows][col] == 2){
                    queue.add(new int[]{rows,col});    
                }
                if(grid[rows][col] == 1) freshOranges++;
            }
        }
        if(freshOranges == 0) return 0;   
        while(!queue.isEmpty()){
            int queueSize = queue.size();
            for(int x = 0; x < queueSize; x++){
                int[] curr = queue.remove();
                            
                for(int d = 0; d < 4; d++){
                    int neighbourRow = curr[0] + direction[d][0];
                    int neighbourCol = curr[1] + direction[d][1];
                    
                    if(neighbourRow < 0 || neighbourRow >= grid.length || neighbourCol < 0 || neighbourCol >= grid[0].length) continue;                
                    if(grid[neighbourRow][neighbourCol] == 1){
                        grid[neighbourRow][neighbourCol] = 2;
                        queue.add(new int[]{neighbourRow,neighbourCol});
                        freshOranges--;
                    }
                }           
            }
            count++;
        }      
        if(freshOranges != 0) return -1;
        return count;    
    }
}
