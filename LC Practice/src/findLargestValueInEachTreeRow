/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> largestValues(TreeNode root) {
        List<Integer> returnList = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();
        TreeNode tempNode;
        
        if(root == null)
            return returnList;
        
        queue.add(root);
        
        while(!queue.isEmpty()){
            int largest = Integer.MIN_VALUE;
            
            int queueCount = queue.size();
            for(int x = 0; x < queueCount; x++){
                tempNode = queue.remove();
                if(tempNode.val > largest)
                    largest = tempNode.val;
                
                if(tempNode.left != null){
                    queue.add(tempNode.left);
                }
                if(tempNode.right != null){
                    queue.add(tempNode.right);
                }
                
            }
            
            returnList.add(largest);
        }
        
        return returnList;
        
    }
}
