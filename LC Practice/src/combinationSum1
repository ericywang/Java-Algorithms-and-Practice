class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> returnSum = new ArrayList<>();
        List<Integer> tempReturnSum = new ArrayList<>();
        
        Arrays.sort(candidates);
        
        helperFunction(candidates, target, returnSum, tempReturnSum, candidates[0]);
        return returnSum;
        
    }
    
    public void helperFunction(int[] candidates, int target, List<List<Integer>> returnSum, List<Integer> tempReturnSum, int firstNum){
        
        
        
        for(int x = 0; x < candidates.length; x++){
            int tempSum = target-candidates[x];
            if (tempSum == 0){ 
                if(candidates[x] < firstNum)
                    continue;
                tempReturnSum.add(candidates[x]);
                
                returnSum.add(new ArrayList<>(tempReturnSum));
                //tempReturnSum.clear();
                tempReturnSum.remove(tempReturnSum.size()-1);
            }
            else if(tempSum < 0){
                return;
            }
            else{
                if(candidates[x] < firstNum)
                    continue;
                tempReturnSum.add(candidates[x]);
                helperFunction(candidates, tempSum, returnSum, tempReturnSum, candidates[x]);
                if(tempReturnSum.size()>0)
                    tempReturnSum.remove(tempReturnSum.size()-1);
            }
        }
        
        return;
    }
}
