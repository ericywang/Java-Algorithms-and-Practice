class Solution {
    public int maxAreaOfIsland(int[][] grid) {
        int returnCount = 0;
        int numOfIslands = 0;
        int tempCount;
        int[][] directions = {{0,1}, {1,0}, {-1,0}, {0,-1}};

        for(int row = 0; row < grid.length; row++){
            for(int col = 0; col < grid[0].length; col++){
                if(grid[row][col] == 1){
                    numOfIslands++;
                    tempCount = helperFunction(grid, directions, 1, new int[]{row,col});
                    returnCount = Math.max(tempCount, returnCount);
                }
            }
        }
        if(numOfIslands ==0) return 0;
        return returnCount;
    }
    
    private int helperFunction(int[][] grid, int[][]directions, int count, int[]curr){
        grid[curr[0]][curr[1]] = 0;
        for(int d = 0; d < 4; d++){
            int neighbourRow = curr[0] + directions[d][0];
            int neighbourCol = curr[1] + directions[d][1];
            
            if(neighbourRow >= 0 && neighbourRow < grid.length && neighbourCol >= 0 && neighbourCol < grid[0].length && grid[neighbourRow][neighbourCol] == 1){
                count = helperFunction(grid, directions, count, new int[]{neighbourRow, neighbourCol}) + 1;
            }
        }
        return count;
    }
}
